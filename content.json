{"meta":{"title":"xuyao's blogs博客","subtitle":null,"description":null,"author":"xuyao","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-09-17T01:39:00.000Z","updated":"2019-09-17T01:40:35.837Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"这里是标签页"}],"posts":[{"title":"使用hexo写博客部署到github pages上","slug":"my-first-blog","date":"2019-09-16T09:46:25.000Z","updated":"2019-09-17T03:29:41.875Z","comments":true,"path":"2019/09/16/my-first-blog/","link":"","permalink":"http://yoursite.com/2019/09/16/my-first-blog/","excerpt":"","text":"搭建hexo环境什么是hexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的_config.yml； 系统环境配置要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！ 安装安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本) Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是D:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 12$ cd /d/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 12$ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github上去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容， 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是下面这样： 目前我安装所用的本地环境如下：(可以通过hexo -v查看) hexo: 3.9.0hexo-cli: 2.0.0os: Windows_NT 10.0.17763 win32 x64http_parser: 2.8.0node: 10.16.3v8: 6.8.275.32-node.54uv: 1.28.0zlib: 1.2.11brotli: 1.0.7ares: 1.15.0modules: 64nghttp2: 1.39.2napi: 4openssl: 1.1.1cicu: 64.2unicode: 12.1cldr: 35.1tz: 2019a hexo 常用命令 ： 12345678$ hexo generate (hexo g) 生成静态文件$ hexo server (hexo s) 启动本地服务$ hexo deploy (hexo d) 提交到远程仓库$ hexo new page \"xx\"(hexo n page) 创建页面 $ hexo new \"xx\" (hexo n \"\") 创建文章$ hexo d -g 生成静态并提交到远程仓库$ hexo s -g 生成静态文件并启动本地预览$ hexo clean 清除本地 public 文件 Github Pages设置什么是Github PagesGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。 每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。 这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。 创建自己的Github Pages注册GitHub及使用Github Pages的过程已经有很多文章讲过，在此不再详述，可以参考： 如何搭建一个独立博客——简明Github Pages与Hexo教程 在这里我创建了一个github repo叫做 1508323954.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://1508323954.github.io/ 访问了。 部署Hexo到Github Pages这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://1508323954.github.io/访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。 首先需要明白所谓部署到github的原理。 之前步骤中在Github上创建的那个特别的repo（1508323954.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://1508323954.github.io来直接访问。 Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。 需要将hexo生成的静态网站，提交(git commit)到github上。 明白了原理，怎么做自然就清晰了。 使用hexo deploy部署hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.xml中作如下修改： 1234deploy: type: git repo: git@github.com:1508323954/1508323954.github.io.git branch: master 然后在命令行中执行 1hexo d 即可完成部署。 踩坑指南1）注意需要提前安装一个扩展： 1$ npm install hexo-deployer-git --save 2）如果出现下面这样的错误， 1Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 则是因为没有设置好public key所致。在本机生成public key(参考github帮助)： 1＃ssh-keygen -t rsa -b 4096 -C &quot;xxx@xxx.com&quot; 然后在 #user_id/.ssh目录下会生成两个文件，id_rsa.pub和id_rsa.然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。","categories":[],"tags":[]}]}